// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/monoserver.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MonofsStatClient is the client API for MonofsStat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonofsStatClient interface {
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
}

type monofsStatClient struct {
	cc grpc.ClientConnInterface
}

func NewMonofsStatClient(cc grpc.ClientConnInterface) MonofsStatClient {
	return &monofsStatClient{cc}
}

func (c *monofsStatClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, "/proto.MonofsStat/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonofsStatServer is the server API for MonofsStat service.
// All implementations must embed UnimplementedMonofsStatServer
// for forward compatibility
type MonofsStatServer interface {
	Stat(context.Context, *StatRequest) (*StatResponse, error)
	mustEmbedUnimplementedMonofsStatServer()
}

// UnimplementedMonofsStatServer must be embedded to have forward compatible implementations.
type UnimplementedMonofsStatServer struct {
}

func (UnimplementedMonofsStatServer) Stat(context.Context, *StatRequest) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedMonofsStatServer) mustEmbedUnimplementedMonofsStatServer() {}

// UnsafeMonofsStatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonofsStatServer will
// result in compilation errors.
type UnsafeMonofsStatServer interface {
	mustEmbedUnimplementedMonofsStatServer()
}

func RegisterMonofsStatServer(s grpc.ServiceRegistrar, srv MonofsStatServer) {
	s.RegisterService(&MonofsStat_ServiceDesc, srv)
}

func _MonofsStat_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonofsStatServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MonofsStat/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonofsStatServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MonofsStat_ServiceDesc is the grpc.ServiceDesc for MonofsStat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonofsStat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MonofsStat",
	HandlerType: (*MonofsStatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stat",
			Handler:    _MonofsStat_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/monoserver.proto",
}

// MonofsProxyClient is the client API for MonofsProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonofsProxyClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (MonofsProxy_ListClient, error)
}

type monofsProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewMonofsProxyClient(cc grpc.ClientConnInterface) MonofsProxyClient {
	return &monofsProxyClient{cc}
}

func (c *monofsProxyClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (MonofsProxy_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &MonofsProxy_ServiceDesc.Streams[0], "/proto.MonofsProxy/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &monofsProxyListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonofsProxy_ListClient interface {
	Recv() (*ListResponse, error)
	grpc.ClientStream
}

type monofsProxyListClient struct {
	grpc.ClientStream
}

func (x *monofsProxyListClient) Recv() (*ListResponse, error) {
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonofsProxyServer is the server API for MonofsProxy service.
// All implementations must embed UnimplementedMonofsProxyServer
// for forward compatibility
type MonofsProxyServer interface {
	List(*ListRequest, MonofsProxy_ListServer) error
	mustEmbedUnimplementedMonofsProxyServer()
}

// UnimplementedMonofsProxyServer must be embedded to have forward compatible implementations.
type UnimplementedMonofsProxyServer struct {
}

func (UnimplementedMonofsProxyServer) List(*ListRequest, MonofsProxy_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMonofsProxyServer) mustEmbedUnimplementedMonofsProxyServer() {}

// UnsafeMonofsProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonofsProxyServer will
// result in compilation errors.
type UnsafeMonofsProxyServer interface {
	mustEmbedUnimplementedMonofsProxyServer()
}

func RegisterMonofsProxyServer(s grpc.ServiceRegistrar, srv MonofsProxyServer) {
	s.RegisterService(&MonofsProxy_ServiceDesc, srv)
}

func _MonofsProxy_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonofsProxyServer).List(m, &monofsProxyListServer{stream})
}

type MonofsProxy_ListServer interface {
	Send(*ListResponse) error
	grpc.ServerStream
}

type monofsProxyListServer struct {
	grpc.ServerStream
}

func (x *monofsProxyListServer) Send(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MonofsProxy_ServiceDesc is the grpc.ServiceDesc for MonofsProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonofsProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MonofsProxy",
	HandlerType: (*MonofsProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _MonofsProxy_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/monoserver.proto",
}

// MonofsManagerClient is the client API for MonofsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonofsManagerClient interface {
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error)
	ListSnapshots(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MonofsManager_ListSnapshotsClient, error)
	DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*DeleteSnapshotResponse, error)
	GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*GetSnapshotResponse, error)
}

type monofsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMonofsManagerClient(cc grpc.ClientConnInterface) MonofsManagerClient {
	return &monofsManagerClient{cc}
}

func (c *monofsManagerClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error) {
	out := new(CreateSnapshotResponse)
	err := c.cc.Invoke(ctx, "/proto.MonofsManager/CreateSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monofsManagerClient) ListSnapshots(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MonofsManager_ListSnapshotsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MonofsManager_ServiceDesc.Streams[0], "/proto.MonofsManager/ListSnapshots", opts...)
	if err != nil {
		return nil, err
	}
	x := &monofsManagerListSnapshotsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonofsManager_ListSnapshotsClient interface {
	Recv() (*ListSnapshotsResponse, error)
	grpc.ClientStream
}

type monofsManagerListSnapshotsClient struct {
	grpc.ClientStream
}

func (x *monofsManagerListSnapshotsClient) Recv() (*ListSnapshotsResponse, error) {
	m := new(ListSnapshotsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monofsManagerClient) DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*DeleteSnapshotResponse, error) {
	out := new(DeleteSnapshotResponse)
	err := c.cc.Invoke(ctx, "/proto.MonofsManager/DeleteSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monofsManagerClient) GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*GetSnapshotResponse, error) {
	out := new(GetSnapshotResponse)
	err := c.cc.Invoke(ctx, "/proto.MonofsManager/GetSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonofsManagerServer is the server API for MonofsManager service.
// All implementations must embed UnimplementedMonofsManagerServer
// for forward compatibility
type MonofsManagerServer interface {
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
	ListSnapshots(*empty.Empty, MonofsManager_ListSnapshotsServer) error
	DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error)
	GetSnapshot(context.Context, *GetSnapshotRequest) (*GetSnapshotResponse, error)
	mustEmbedUnimplementedMonofsManagerServer()
}

// UnimplementedMonofsManagerServer must be embedded to have forward compatible implementations.
type UnimplementedMonofsManagerServer struct {
}

func (UnimplementedMonofsManagerServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedMonofsManagerServer) ListSnapshots(*empty.Empty, MonofsManager_ListSnapshotsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSnapshots not implemented")
}
func (UnimplementedMonofsManagerServer) DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSnapshot not implemented")
}
func (UnimplementedMonofsManagerServer) GetSnapshot(context.Context, *GetSnapshotRequest) (*GetSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshot not implemented")
}
func (UnimplementedMonofsManagerServer) mustEmbedUnimplementedMonofsManagerServer() {}

// UnsafeMonofsManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonofsManagerServer will
// result in compilation errors.
type UnsafeMonofsManagerServer interface {
	mustEmbedUnimplementedMonofsManagerServer()
}

func RegisterMonofsManagerServer(s grpc.ServiceRegistrar, srv MonofsManagerServer) {
	s.RegisterService(&MonofsManager_ServiceDesc, srv)
}

func _MonofsManager_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonofsManagerServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MonofsManager/CreateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonofsManagerServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonofsManager_ListSnapshots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonofsManagerServer).ListSnapshots(m, &monofsManagerListSnapshotsServer{stream})
}

type MonofsManager_ListSnapshotsServer interface {
	Send(*ListSnapshotsResponse) error
	grpc.ServerStream
}

type monofsManagerListSnapshotsServer struct {
	grpc.ServerStream
}

func (x *monofsManagerListSnapshotsServer) Send(m *ListSnapshotsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MonofsManager_DeleteSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonofsManagerServer).DeleteSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MonofsManager/DeleteSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonofsManagerServer).DeleteSnapshot(ctx, req.(*DeleteSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonofsManager_GetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonofsManagerServer).GetSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MonofsManager/GetSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonofsManagerServer).GetSnapshot(ctx, req.(*GetSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MonofsManager_ServiceDesc is the grpc.ServiceDesc for MonofsManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonofsManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MonofsManager",
	HandlerType: (*MonofsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSnapshot",
			Handler:    _MonofsManager_CreateSnapshot_Handler,
		},
		{
			MethodName: "DeleteSnapshot",
			Handler:    _MonofsManager_DeleteSnapshot_Handler,
		},
		{
			MethodName: "GetSnapshot",
			Handler:    _MonofsManager_GetSnapshot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListSnapshots",
			Handler:       _MonofsManager_ListSnapshots_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/monoserver.proto",
}
